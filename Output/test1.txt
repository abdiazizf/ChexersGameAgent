******************************************************************
welcome to Chexers referee version 1.1 (released Apr 27 2019).
conducts a game of Chexers between three Player classes.
run `python -m referee --help` for additional usage information.
******************************************************************
* all messages printed by the referee after this begin with a *
* (any other lines of output must be from your Player classes).
*
* importing red player's player class 'Player' from package 'A_n_J.Player'
* importing green player's player class 'Player' from package 'A_n_J.Player2'
* importing blue player's player class 'Player' from package 'A_n_J.Player2'
* NOTE: unable to measure memory usage on this platform (try dimefox)
* ** initialising players **
* initialising red player as a 'A_n_J.Player.Player'
*   time:  + 0.000s  (just elapsed)    0.000s  (game total)
* initialising green player as a 'A_n_J.Player2.Player'
*   time:  + 0.000s  (just elapsed)    0.000s  (game total)
* initialising blue player as a 'A_n_J.Player2.Player'
*   time:  + 0.000s  (just elapsed)    0.000s  (game total)
* ** game start **
* displaying game info:
*   scores: Red: 0 exits, Green: 0 exits, Blue: 0 exits.
*   board:    .-'-._.-'-._.-'-._.-'-.
*            |  G  |  G  |  G  |  G  |
*          .-'-._.-'-._.-'-._.-'-._.-'-.
*         |     |     |     |     |     |
*       .-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*      |     |     |     |     |     |     |
*    .-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*   |  R  |     |     |     |     |     |  B  |
*   '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*      |  R  |     |     |     |     |  B  |
*      '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*         |  R  |     |     |     |  B  |
*         '-._.-'-._.-'-._.-'-._.-'-._.-'
*            |  R  |     |     |  B  |
*            '-._.-'-._.-'-._.-'-._.-'
* ** red player's turn **
* asking red player for next action...
         301313 function calls (301126 primitive calls) in 0.153 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.153    0.153 MonteCarlo.py:16(best_action)
        1    0.002    0.002    0.153    0.153 MCNode.py:74(rollout)
      728    0.001    0.000    0.148    0.000 BoardState.py:134(do_move)
      729    0.015    0.000    0.145    0.000 PossibleActions.py:30(generate_actions)
    29309    0.024    0.000    0.126    0.000 PossibleActions.py:50(add_action)
    29309    0.021    0.000    0.086    0.000 PossibleActions.py:61(valid_action)
    29232    0.011    0.000    0.048    0.000 Action.py:20(on_board)
    29232    0.024    0.000    0.037    0.000 Action.py:64(hex_distance)
     6646    0.005    0.000    0.017    0.000 PossibleActions.py:83(has_neighbour_in_jump_direction)
    29450    0.015    0.000    0.015    0.000 Action.py:39(__init__)
     6729    0.009    0.000    0.012    0.000 Action.py:51(get_neighbour_space)
    29232    0.005    0.000    0.005    0.000 Action.py:57(same_sign)
    19233    0.004    0.000    0.004    0.000 {built-in method builtins.max}
    14616    0.004    0.000    0.004    0.000 PossibleActions.py:91(jump)
    48464    0.004    0.000    0.004    0.000 {built-in method builtins.abs}
     6729    0.003    0.000    0.003    0.000 Action.py:48(get_direction)
      728    0.000    0.000    0.002    0.000 MCNode.py:70(rollout_policy)
      728    0.001    0.000    0.002    0.000 random.py:256(choice)
      728    0.001    0.000    0.001    0.000 BoardState.py:106(do_update)
      729    0.001    0.000    0.001    0.000 random.py:224(_randbelow)
    11443    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
    165/1    0.000    0.000    0.000    0.000 copy.py:132(deepcopy)
     10/1    0.000    0.000    0.000    0.000 copy.py:268(_reconstruct)
     10/1    0.000    0.000    0.000    0.000 copy.py:236(_deepcopy_dict)
      729    0.000    0.000    0.000    0.000 BoardState.py:167(is_terminal_state)
      7/3    0.000    0.000    0.000    0.000 copy.py:210(_deepcopy_list)
        1    0.000    0.000    0.000    0.000 MonteCarlo.py:33(expand_tree)
        1    0.000    0.000    0.000    0.000 MCNode.py:55(expand)
     1165    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
        1    0.000    0.000    0.000    0.000 BoardState.py:90(generate_successor)
        1    0.000    0.000    0.000    0.000 BoardState.py:21(__init__)
      729    0.000    0.000    0.000    0.000 BoardState.py:145(player_turn_order)
      629    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
       28    0.000    0.000    0.000    0.000 copy.py:219(_deepcopy_tuple)
     1459    0.000    0.000    0.000    0.000 {built-in method builtins.len}
      729    0.000    0.000    0.000    0.000 PossibleActions.py:101(get_actions)
      729    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
       28    0.000    0.000    0.000    0.000 copy.py:220(<listcomp>)
      340    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      249    0.000    0.000    0.000    0.000 {built-in method builtins.id}
       20    0.000    0.000    0.000    0.000 copy.py:273(<genexpr>)
       10    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 MCNode.py:40(best_child)
       28    0.000    0.000    0.000    0.000 copy.py:252(_keep_alive)
       10    0.000    0.000    0.000    0.000 copyreg.py:87(__newobj__)
        3    0.000    0.000    0.000    0.000 copyreg.py:96(_slotnames)
        1    0.000    0.000    0.000    0.000 random.py:218(randint)
        1    0.000    0.000    0.000    0.000 random.py:174(randrange)
      109    0.000    0.000    0.000    0.000 copy.py:190(_deepcopy_atomic)
        1    0.000    0.000    0.000    0.000 BoardState.py:37(update_piece_positions)
        1    0.000    0.000    0.000    0.000 MCNode.py:33(fully_expanded)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.array}
        1    0.000    0.000    0.000    0.000 {method '__deepcopy__' of 'numpy.ndarray' objects}
      2/1    0.000    0.000    0.000    0.000 MCNode.py:83(backpropogate)
       13    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
       21    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
       20    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        3    0.000    0.000    0.000    0.000 MCNode.py:101(untried_actions)
        1    0.000    0.000    0.000    0.000 MCNode.py:20(__init__)
        1    0.000    0.000    0.000    0.000 MonteCarlo.py:27(traverse)
        1    0.000    0.000    0.000    0.000 {built-in method math.sqrt}
       10    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
       11    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 BoardState.py:39(<listcomp>)
        1    0.000    0.000    0.000    0.000 MCNode.py:107(wins)
        1    0.000    0.000    0.000    0.000 {built-in method math.log}
        3    0.000    0.000    0.000    0.000 {method 'get' of 'mappingproxy' objects}
       10    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
       10    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x72691320}
        1    0.000    0.000    0.000    0.000 MCNode.py:97(has_children)
        1    0.000    0.000    0.000    0.000 BoardState.py:178(get_winner)
        3    0.000    0.000    0.000    0.000 MCNode.py:118(visits)
        1    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
        1    0.000    0.000    0.000    0.000 PossibleActions.py:104(__init__)
        1    0.000    0.000    0.000    0.000 MCNode.py:89(get_generated_by)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


*   red player returned action: ('MOVE', ((-3, 2), (-2, 1)))
*   time:  + 0.172s  (just elapsed)    0.172s  (game total)
* displaying game info:
*   scores: Red: 0 exits, Green: 0 exits, Blue: 0 exits.
*   board:    .-'-._.-'-._.-'-._.-'-.
*            |  G  |  G  |  G  |  G  |
*          .-'-._.-'-._.-'-._.-'-._.-'-.
*         |     |     |     |     |     |
*       .-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*      |     |     |     |     |     |     |
*    .-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*   |  R  |     |     |     |     |     |  B  |
*   '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*      |  R  |  R  |     |     |     |  B  |
*      '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*         |     |     |     |     |  B  |
*         '-._.-'-._.-'-._.-'-._.-'-._.-'
*            |  R  |     |     |  B  |
*            '-._.-'-._.-'-._.-'-._.-'
* updating red player with red's action ('MOVE', ((-3, 2), (-2, 1)))...
*   time:  + 0.000s  (just elapsed)    0.172s  (game total)
* updating green player with red's action ('MOVE', ((-3, 2), (-2, 1)))...
*   time:  + 0.000s  (just elapsed)    0.000s  (game total)
* updating blue player with red's action ('MOVE', ((-3, 2), (-2, 1)))...
*   time:  + 0.000s  (just elapsed)    0.000s  (game total)
* ** green player's turn **
* asking green player for next action...
*   green player returned action: ('MOVE', ((1, -3), (1, -2)))
*   time:  + 0.062s  (just elapsed)    0.062s  (game total)
* displaying game info:
*   scores: Red: 0 exits, Green: 0 exits, Blue: 0 exits.
*   board:    .-'-._.-'-._.-'-._.-'-.
*            |  G  |     |  G  |  G  |
*          .-'-._.-'-._.-'-._.-'-._.-'-.
*         |     |     |  G  |     |     |
*       .-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*      |     |     |     |     |     |     |
*    .-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*   |  R  |     |     |     |     |     |  B  |
*   '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*      |  R  |  R  |     |     |     |  B  |
*      '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*         |     |     |     |     |  B  |
*         '-._.-'-._.-'-._.-'-._.-'-._.-'
*            |  R  |     |     |  B  |
*            '-._.-'-._.-'-._.-'-._.-'
* updating red player with green's action ('MOVE', ((1, -3), (1, -2)))...
*   time:  + 0.000s  (just elapsed)    0.172s  (game total)
* updating green player with green's action ('MOVE', ((1, -3), (1, -2)))...
*   time:  + 0.000s  (just elapsed)    0.062s  (game total)
* updating blue player with green's action ('MOVE', ((1, -3), (1, -2)))...
*   time:  + 0.000s  (just elapsed)    0.000s  (game total)
* ** blue player's turn **
* asking blue player for next action...
*   blue player returned action: ('MOVE', ((0, 3), (0, 2)))
*   time:  + 0.047s  (just elapsed)    0.047s  (game total)
* displaying game info:
*   scores: Red: 0 exits, Green: 0 exits, Blue: 0 exits.
*   board:    .-'-._.-'-._.-'-._.-'-.
*            |  G  |     |  G  |  G  |
*          .-'-._.-'-._.-'-._.-'-._.-'-.
*         |     |     |  G  |     |     |
*       .-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*      |     |     |     |     |     |     |
*    .-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*   |  R  |     |     |     |     |     |  B  |
*   '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*      |  R  |  R  |     |     |     |  B  |
*      '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*         |     |     |     |  B  |  B  |
*         '-._.-'-._.-'-._.-'-._.-'-._.-'
*            |  R  |     |     |     |
*            '-._.-'-._.-'-._.-'-._.-'
* updating red player with blue's action ('MOVE', ((0, 3), (0, 2)))...
*   time:  + 0.000s  (just elapsed)    0.172s  (game total)
* updating green player with blue's action ('MOVE', ((0, 3), (0, 2)))...
*   time:  + 0.000s  (just elapsed)    0.062s  (game total)
* updating blue player with blue's action ('MOVE', ((0, 3), (0, 2)))...
*   time:  + 0.000s  (just elapsed)    0.047s  (game total)
* ** red player's turn **
* asking red player for next action...
         155408 function calls (155131 primitive calls) in 0.080 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.080    0.080 MonteCarlo.py:16(best_action)
        1    0.001    0.001    0.079    0.079 MCNode.py:74(rollout)
      419    0.001    0.000    0.076    0.000 BoardState.py:134(do_move)
      420    0.008    0.000    0.075    0.000 PossibleActions.py:30(generate_actions)
    14911    0.012    0.000    0.065    0.000 PossibleActions.py:50(add_action)
    14911    0.011    0.000    0.045    0.000 PossibleActions.py:61(valid_action)
    14856    0.006    0.000    0.025    0.000 Action.py:20(on_board)
    14856    0.012    0.000    0.019    0.000 Action.py:64(hex_distance)
     3547    0.002    0.000    0.009    0.000 PossibleActions.py:83(has_neighbour_in_jump_direction)
    14977    0.008    0.000    0.008    0.000 Action.py:39(__init__)
     3600    0.005    0.000    0.007    0.000 Action.py:51(get_neighbour_space)
    14856    0.003    0.000    0.003    0.000 Action.py:57(same_sign)
     9539    0.002    0.000    0.002    0.000 {built-in method builtins.max}
     7428    0.002    0.000    0.002    0.000 PossibleActions.py:91(jump)
     3600    0.002    0.000    0.002    0.000 Action.py:48(get_direction)
    24394    0.002    0.000    0.002    0.000 {built-in method builtins.abs}
      419    0.000    0.000    0.001    0.000 MCNode.py:70(rollout_policy)
      419    0.000    0.000    0.001    0.000 random.py:256(choice)
      419    0.001    0.000    0.001    0.000 BoardState.py:106(do_update)
    243/1    0.000    0.000    0.001    0.001 copy.py:132(deepcopy)
     16/1    0.000    0.000    0.001    0.001 copy.py:268(_reconstruct)
     16/1    0.000    0.000    0.001    0.001 copy.py:236(_deepcopy_dict)
      420    0.000    0.000    0.001    0.000 random.py:224(_randbelow)
      7/3    0.000    0.000    0.001    0.000 copy.py:210(_deepcopy_list)
     6187    0.001    0.000    0.001    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 MonteCarlo.py:33(expand_tree)
        1    0.000    0.000    0.000    0.000 MCNode.py:55(expand)
        1    0.000    0.000    0.000    0.000 BoardState.py:90(generate_successor)
        1    0.000    0.000    0.000    0.000 BoardState.py:21(__init__)
      420    0.000    0.000    0.000    0.000 BoardState.py:167(is_terminal_state)
       40    0.000    0.000    0.000    0.000 copy.py:219(_deepcopy_tuple)
      649    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
       40    0.000    0.000    0.000    0.000 copy.py:220(<listcomp>)
      420    0.000    0.000    0.000    0.000 BoardState.py:145(player_turn_order)
      385    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
      841    0.000    0.000    0.000    0.000 {built-in method builtins.len}
      420    0.000    0.000    0.000    0.000 PossibleActions.py:101(get_actions)
      502    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
      420    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
       32    0.000    0.000    0.000    0.000 copy.py:273(<genexpr>)
       40    0.000    0.000    0.000    0.000 copy.py:252(_keep_alive)
      363    0.000    0.000    0.000    0.000 {built-in method builtins.id}
        1    0.000    0.000    0.000    0.000 MCNode.py:40(best_child)
       33    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}
       16    0.000    0.000    0.000    0.000 copyreg.py:87(__newobj__)
      163    0.000    0.000    0.000    0.000 copy.py:190(_deepcopy_atomic)
       16    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 random.py:218(randint)
        1    0.000    0.000    0.000    0.000 random.py:174(randrange)
        1    0.000    0.000    0.000    0.000 BoardState.py:37(update_piece_positions)
        1    0.000    0.000    0.000    0.000 MCNode.py:33(fully_expanded)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.array}
      2/1    0.000    0.000    0.000    0.000 MCNode.py:83(backpropogate)
       16    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}
       32    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        1    0.000    0.000    0.000    0.000 MCNode.py:20(__init__)
       16    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
        3    0.000    0.000    0.000    0.000 MCNode.py:101(untried_actions)
       16    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x72691320}
        1    0.000    0.000    0.000    0.000 MCNode.py:107(wins)
        1    0.000    0.000    0.000    0.000 {built-in method math.sqrt}
       16    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
       17    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}
        1    0.000    0.000    0.000    0.000 MonteCarlo.py:27(traverse)
        1    0.000    0.000    0.000    0.000 {method '__deepcopy__' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 BoardState.py:39(<listcomp>)
        1    0.000    0.000    0.000    0.000 {built-in method math.log}
        1    0.000    0.000    0.000    0.000 MCNode.py:97(has_children)
        1    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.000    0.000 BoardState.py:178(get_winner)
        1    0.000    0.000    0.000    0.000 PossibleActions.py:104(__init__)
        1    0.000    0.000    0.000    0.000 MCNode.py:89(get_generated_by)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        3    0.000    0.000    0.000    0.000 MCNode.py:118(visits)


*   red player returned action: ('MOVE', ((-2, 1), (-2, 0)))
*   time:  + 0.078s  (just elapsed)    0.250s  (game total)
* displaying game info:
*   scores: Red: 0 exits, Green: 0 exits, Blue: 0 exits.
*   board:    .-'-._.-'-._.-'-._.-'-.
*            |  G  |     |  G  |  G  |
*          .-'-._.-'-._.-'-._.-'-._.-'-.
*         |     |     |  G  |     |     |
*       .-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*      |     |     |     |     |     |     |
*    .-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*   |  R  |  R  |     |     |     |     |  B  |
*   '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*      |  R  |     |     |     |     |  B  |
*      '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*         |     |     |     |  B  |  B  |
*         '-._.-'-._.-'-._.-'-._.-'-._.-'
*            |  R  |     |     |     |
*            '-._.-'-._.-'-._.-'-._.-'
* updating red player with red's action ('MOVE', ((-2, 1), (-2, 0)))...
*   time:  + 0.000s  (just elapsed)    0.250s  (game total)
* updating green player with red's action ('MOVE', ((-2, 1), (-2, 0)))...
*   time:  + 0.000s  (just elapsed)    0.062s  (game total)
* updating blue player with red's action ('MOVE', ((-2, 1), (-2, 0)))...
*   time:  + 0.000s  (just elapsed)    0.047s  (game total)
* ** green player's turn **
* asking green player for next action...
*   green player returned action: ('MOVE', ((3, -3), (3, -2)))
*   time:  + 0.062s  (just elapsed)    0.125s  (game total)
* displaying game info:
*   scores: Red: 0 exits, Green: 0 exits, Blue: 0 exits.
*   board:    .-'-._.-'-._.-'-._.-'-.
*            |  G  |     |  G  |     |
*          .-'-._.-'-._.-'-._.-'-._.-'-.
*         |     |     |  G  |     |  G  |
*       .-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*      |     |     |     |     |     |     |
*    .-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*   |  R  |  R  |     |     |     |     |  B  |
*   '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*      |  R  |     |     |     |     |  B  |
*      '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*         |     |     |     |  B  |  B  |
*         '-._.-'-._.-'-._.-'-._.-'-._.-'
*            |  R  |     |     |     |
*            '-._.-'-._.-'-._.-'-._.-'
* updating red player with green's action ('MOVE', ((3, -3), (3, -2)))...
*   time:  + 0.000s  (just elapsed)    0.250s  (game total)
* updating green player with green's action ('MOVE', ((3, -3), (3, -2)))...
*   time:  + 0.000s  (just elapsed)    0.125s  (game total)
* updating blue player with green's action ('MOVE', ((3, -3), (3, -2)))...
*   time:  + 0.000s  (just elapsed)    0.047s  (game total)
* ** blue player's turn **
* asking blue player for next action...
*   blue player returned action: ('MOVE', ((3, 0), (2, 0)))
*   time:  + 0.125s  (just elapsed)    0.172s  (game total)
* displaying game info:
*   scores: Red: 0 exits, Green: 0 exits, Blue: 0 exits.
*   board:    .-'-._.-'-._.-'-._.-'-.
*            |  G  |     |  G  |     |
*          .-'-._.-'-._.-'-._.-'-._.-'-.
*         |     |     |  G  |     |  G  |
*       .-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*      |     |     |     |     |     |     |
*    .-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-.
*   |  R  |  R  |     |     |     |  B  |     |
*   '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*      |  R  |     |     |     |     |  B  |
*      '-._.-'-._.-'-._.-'-._.-'-._.-'-._.-'
*         |     |     |     |  B  |  B  |
*         '-._.-'-._.-'-._.-'-._.-'-._.-'
*            |  R  |     |     |     |
*            '-._.-'-._.-'-._.-'-._.-'
* updating red player with blue's action ('MOVE', ((3, 0), (2, 0)))...
*   time:  + 0.000s  (just elapsed)    0.250s  (game total)
* updating green player with blue's action ('MOVE', ((3, 0), (2, 0)))...
*   time:  + 0.000s  (just elapsed)    0.125s  (game total)
* updating blue player with blue's action ('MOVE', ((3, 0), (2, 0)))...
*   time:  + 0.000s  (just elapsed)    0.172s  (game total)
* ** red player's turn **
* asking red player for next action...
